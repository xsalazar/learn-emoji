{"version":3,"sources":["components/Emoji/Emoji.js","components/Footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Emoji","props","emoji","_","sample","emojis","state","input","value","isCorrect","currentEmoji","link","name","handleSubmit","bind","handleInput","this","currentStatus","src","alt","onSubmit","type","onInput","placeholder","setState","event","preventDefault","setRandomEmoji","userInput","target","replace","React","Component","Footer","className","href","App","loading","fetch","then","resp","json","key","push","catch","e","console","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAyEeA,E,kDApEb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAMC,EAAQC,IAAEC,OAAO,EAAKH,MAAMI,QAHjB,OAIjB,EAAKC,MAAQ,CACXC,MAAO,CACLC,MAAO,GACPC,WAAW,GAEbC,aAAc,CACZC,KAAMT,EAAMS,KACZC,KAAMV,EAAMU,OAIhB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAhBF,E,qDAoBjB,IAAMJ,EAAeM,KAAKV,MAAMI,aAC1BO,EAAgBD,KAAKV,MAAMC,MAAME,UAAY,eAAM,SAEzD,OACE,gCACE,qBAAKS,IAAKR,EAAaC,KAAMQ,IAAI,UACjC,uBAAMC,SAAUJ,KAAKH,aAArB,eACI,uBAAOQ,KAAK,OAAOb,MAAOQ,KAAKV,MAAMC,MAAMC,MAAOc,QAASN,KAAKD,YAAcQ,YAAY,oBAD9F,QAGCN,O,uCAML,IAAMf,EAAQC,IAAEC,OAAOY,KAAKf,MAAMI,QAClCW,KAAKQ,SAAS,CACZd,aAAc,CACZC,KAAMT,EAAMS,KACZC,KAAMV,EAAMU,U,mCAKLa,GACXA,EAAMC,iBAENV,KAAKQ,SAAS,CACZjB,MAAO,CACLC,MAAO,GACPC,WAAW,KAIfO,KAAKW,mB,kCAGKF,GACV,IAAMG,EAAYH,EAAMI,OAAOrB,MAAMsB,QAAQ,IAAK,KAClDd,KAAKQ,SAAS,CACZjB,MAAO,CACLC,MAAOoB,EACPnB,UAAWO,KAAKV,MAAMI,aAAaE,OAASgB,S,GA/DhCG,IAAMC,W,gBCUXC,E,uKARX,OACE,8BACE,yBAAQC,UAAU,SAAlB,UAA2B,cAAC,IAAD,IAA3B,IAA8C,mBAAGC,KAAK,8BAAR,gC,GAJjCJ,IAAMC,WC4CZI,E,kDA1Cb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAEDK,MAAQ,CACX+B,SAAS,EACThC,OAAQ,IALO,E,gEASE,IAAD,OAClBiC,MAAM,iCACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACC,GACL,IAAMnC,EAAS,GACf,IAAK,IAAMqC,KAAOF,EAChBnC,EAAOsC,KAAK,CACV/B,KAAM8B,EACN/B,KAAM6B,EAAKE,KAGf,EAAKlB,SAAS,CACZnB,SACAgC,SAAS,OAGZO,OAAM,SAACC,GAAD,OAAOC,QAAQC,MAAMF,Q,+BAI9B,OAAI7B,KAAKV,MAAM+B,QACL,wBAIR,sBAAKH,UAAU,MAAf,UACE,cAAC,EAAD,CAAO7B,OAAQW,KAAKV,MAAMD,SAC1B,cAAC,EAAD,W,GArCU0B,IAAMC,WCOTgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.78ca4fdd.chunk.js","sourcesContent":["import \"./Emoji.css\";\nimport React from \"react\";\nimport _ from \"lodash\";\n\nclass Emoji extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const emoji = _.sample(this.props.emojis);\n    this.state = {\n      input: {\n        value: \"\",\n        isCorrect: false\n      },\n      currentEmoji: {\n        link: emoji.link,\n        name: emoji.name\n      }\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  render() {\n    const currentEmoji = this.state.currentEmoji;\n    const currentStatus = this.state.input.isCorrect ? \"✔️\": \"❌\";\n\n    return (\n      <div>\n        <img src={currentEmoji.link} alt=\"emoji\"></img>\n        <form onSubmit={this.handleSubmit}>\n          : <input type=\"text\" value={this.state.input.value} onInput={this.handleInput}  placeholder=\"Guess the emoji\"></input> :\n        </form>\n        {currentStatus}\n      </div>\n    );\n  }\n\n  setRandomEmoji() {\n    const emoji = _.sample(this.props.emojis);\n    this.setState({\n      currentEmoji: {\n        link: emoji.link,\n        name: emoji.name\n      }\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    \n    this.setState({\n      input: {\n        value: \"\",\n        isCorrect: false\n      }\n    });\n\n    this.setRandomEmoji();\n  }\n\n  handleInput(event) {\n    const userInput = event.target.value.replace(' ', '_');\n    this.setState({\n      input: {\n        value: userInput,\n        isCorrect: this.state.currentEmoji.name === userInput\n      }\n    })\n  }\n}\n\nexport default Emoji;\n","import \"./Footer.css\"\nimport React from \"react\";\nimport { MarkGithubIcon } from \"@primer/octicons-react\";\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div>\n        <footer className=\"Footer\"><MarkGithubIcon /> <a href=\"https://github.com/xsalazar\">@xsalazar</a></footer>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import \"./App.css\";\nimport React from \"react\";\nimport Emoji from \"./components/Emoji/Emoji\";\nimport Footer from \"./components/Footer/Footer\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      emojis: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.github.com/emojis\")\n      .then((resp) => resp.json())\n      .then((resp) => {\n        const emojis = [];\n        for (const key in resp) {\n          emojis.push({\n            name: key,\n            link: resp[key],\n          });\n        }\n        this.setState({\n          emojis,\n          loading: false\n        });\n      })\n      .catch((e) => console.error(e));\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (<div></div>);\n    }\n\n    return (\n      <div className=\"App\">\n        <Emoji emojis={this.state.emojis}></Emoji>\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}