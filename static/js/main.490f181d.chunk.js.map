{"version":3,"sources":["components/Emoji/Emoji.js","components/Footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Emoji","props","emoji","getEmoji","state","input","value","isCorrect","currentEmoji","codePoint","unified","names","short_names","showAnswer","handleSubmit","bind","handleInput","handleToggle","this","isEmpty","style","flex","dangerouslySetInnerHTML","createEmoji","onSubmit","TextField","type","onInput","label","variant","error","InputProps","endAdornment","InputAdornment","position","getGuessStatus","inputProps","autoCapitalize","FormControlLabel","padding","control","Switch","size","onChange","__html","twemoji","parse","split","map","convert","fromCodePoint","join","ext","folder","result","className","setState","_","sample","emojis","filter","e","category","event","preventDefault","setRandomEmoji","userInput","target","replace","toLowerCase","includes","React","Component","flexContainer","display","flexDirection","whiteSpace","Footer","List","ListItem","alignItems","Typography","Link","href","color","verticalAlign","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.490f181d.chunk.js","sourcesContent":["import \"./Emoji.css\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport {\n  TextField,\n  InputAdornment,\n  Switch,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport emojis from \"emoji-datasource/emoji_pretty.json\";\nimport twemoji from \"twemoji\";\n\nclass Emoji extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const emoji = this.getEmoji();\n    this.state = {\n      input: {\n        value: \"\",\n        isCorrect: false,\n      },\n      currentEmoji: {\n        codePoint: emoji.unified,\n        names: emoji.short_names,\n      },\n      showAnswer: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  render() {\n    const currentEmoji = this.state.currentEmoji;\n    const isEmpty = this.state.input.value === \"\";\n    const isCorrect = this.state.input.isCorrect;\n\n    return (\n      <div style={{ flex: 1 }}>\n        <div\n          dangerouslySetInnerHTML={this.createEmoji(currentEmoji.codePoint)}\n        ></div>\n        <form onSubmit={this.handleSubmit}>\n          <TextField\n            type=\"text\"\n            value={this.state.input.value}\n            onInput={this.handleInput}\n            label=\"Guess the emoji\"\n            variant=\"outlined\"\n            error={!isCorrect && !isEmpty}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment\n                  position=\"end\"\n                  dangerouslySetInnerHTML={this.getGuessStatus(\n                    isCorrect,\n                    isEmpty\n                  )}\n                ></InputAdornment>\n              ),\n            }}\n            inputProps={{\n              autoCapitalize: \"none\",\n            }}\n          ></TextField>\n        </form>\n        <FormControlLabel\n          style={{ padding: \"8px\" }}\n          control={<Switch size=\"small\" onChange={this.handleToggle} />}\n          label=\"Show answer?\"\n        />\n        <div>\n          {this.state.showAnswer ? this.state.currentEmoji.names[0] : \"\"}\n        </div>\n      </div>\n    );\n  }\n\n  createEmoji(codePoint) {\n    return {\n      __html: twemoji.parse(\n        codePoint.split(\"-\").map(twemoji.convert.fromCodePoint).join(\"\"),\n        {\n          ext: \".svg\",\n          folder: \"svg\",\n        }\n      ),\n    };\n  }\n\n  getGuessStatus(isCorrect, isEmpty) {\n    if (isEmpty) {\n      return;\n    }\n\n    let result = \"\";\n    const check = \"2714-FE0F\";\n    const x = \"274C\";\n\n    if (!isEmpty && isCorrect) {\n      result = check;\n    } else {\n      result = x;\n    }\n\n    return {\n      __html: twemoji.parse(\n        result.split(\"-\").map(twemoji.convert.fromCodePoint).join(\"\"),\n        {\n          className: \"input-emoji\",\n        }\n      ),\n    };\n  }\n\n  setRandomEmoji() {\n    const emoji = this.getEmoji();\n    this.setState({\n      currentEmoji: {\n        codePoint: emoji.unified,\n        names: emoji.short_names,\n      },\n    });\n  }\n\n  getEmoji() {\n    return _.sample(\n      emojis.filter(\n        (e) =>\n          e.category === \"Smileys & Emotion\" ||\n          e.category === \"Animals & Nature\" ||\n          e.category === \"Food & Drink\"\n      )\n    );\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    this.setState({\n      input: {\n        value: \"\",\n        isCorrect: false,\n      },\n    });\n\n    this.setRandomEmoji();\n  }\n\n  handleInput(event) {\n    const userInput = event.target.value.replace(\" \", \"_\").toLowerCase();\n    this.setState({\n      input: {\n        value: userInput,\n        isCorrect: this.state.currentEmoji.names.includes(userInput),\n      },\n    });\n  }\n\n  handleToggle(event) {\n    this.setState({\n      showAnswer: !this.state.showAnswer,\n    });\n  }\n}\n\nexport default Emoji;\n","import \"./Footer.css\";\nimport React from \"react\";\nimport { Typography, Link, List, ListItem } from \"@material-ui/core\";\nimport { MarkGithubIcon } from \"@primer/octicons-react\";\n\nconst flexContainer = {\n  display: \"inline-flex\",\n  flexDirection: \"row\",\n  padding: 0,\n  whiteSpace: \"nowrap\",\n};\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div>\n        <footer className=\"Footer\">\n          <div>\n            <List style={flexContainer}>\n              {/* Link */}\n              <ListItem alignItems=\"center\">\n                <Typography variant=\"body2\">\n                  <Link href=\"https://github.com/xsalazar\" color=\"textPrimary\">\n                    <MarkGithubIcon size=\"small\" verticalAlign=\"middle\" />\n                  </Link>\n                </Typography>\n              </ListItem>\n\n              {/* Link */}\n              <ListItem alignItems=\"center\">\n                <Typography variant=\"body2\">\n                  <Link href=\"https://github.com/xsalazar/learn-emoji\">\n                    Source Code\n                  </Link>\n                </Typography>\n              </ListItem>\n            </List>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import \"./App.css\";\nimport React from \"react\";\nimport Emoji from \"./components/Emoji/Emoji\";\nimport Footer from \"./components/Footer/Footer\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"flex-wrapper\">\n          <Emoji />\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}