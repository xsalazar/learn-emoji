{"version":3,"sources":["components/Emoji/Emoji.js","components/Footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Emoji","props","emoji","_","sample","emojis","state","input","value","isCorrect","currentEmoji","link","name","handleSubmit","bind","handleInput","this","isEmpty","src","alt","onSubmit","TextField","type","onInput","label","variant","error","inputProps","autoCapitalize","setState","event","preventDefault","setRandomEmoji","userInput","target","replace","React","Component","flexContainer","display","flexDirection","padding","whiteSpace","Footer","className","List","style","ListItem","alignItems","Typography","Link","href","color","size","verticalAlign","App","loading","fetch","then","resp","json","key","push","catch","e","console","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cd0da9f.chunk.js","sourcesContent":["import \"./Emoji.css\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport TextField from \"@material-ui/core/TextField\";\n\nclass Emoji extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const emoji = _.sample(this.props.emojis);\n    this.state = {\n      input: {\n        value: \"\",\n        isCorrect: false,\n      },\n      currentEmoji: {\n        link: emoji.link,\n        name: emoji.name,\n      },\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  render() {\n    const currentEmoji = this.state.currentEmoji;\n    const isEmpty = this.state.input.value === \"\";\n    const isCorrect = this.state.input.isCorrect;\n\n    return (\n      <div>\n        <img src={currentEmoji.link} alt=\"emoji\"></img>\n        <form onSubmit={this.handleSubmit}>\n          <TextField\n            type=\"text\"\n            value={this.state.input.value}\n            onInput={this.handleInput}\n            label=\"Guess the emoji\"\n            variant=\"outlined\"\n            error={!isCorrect && !isEmpty}\n            inputProps={{\n              autoCapitalize: 'none'\n            }}\n          ></TextField>\n        </form>\n      </div>\n    );\n  }\n\n  setRandomEmoji() {\n    const emoji = _.sample(this.props.emojis);\n    this.setState({\n      currentEmoji: {\n        link: emoji.link,\n        name: emoji.name,\n      },\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    this.setState({\n      input: {\n        value: \"\",\n        isCorrect: false,\n      },\n    });\n\n    this.setRandomEmoji();\n  }\n\n  handleInput(event) {\n    const userInput = event.target.value.replace(\" \", \"_\");\n    this.setState({\n      input: {\n        value: userInput,\n        isCorrect: this.state.currentEmoji.name === userInput,\n      },\n    });\n  }\n}\n\nexport default Emoji;\n","import \"./Footer.css\";\nimport React from \"react\";\nimport { Typography, Link, List, ListItem} from \"@material-ui/core\";\nimport { MarkGithubIcon } from \"@primer/octicons-react\";\n\nconst flexContainer = {\n  display: \"inline-flex\",\n  flexDirection: \"row\",\n  padding: 0,\n  whiteSpace: \"nowrap\",\n};\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div>\n        <footer className=\"Footer\">\n          <div>\n            <List style={flexContainer}>\n              {/* Link */}\n              <ListItem alignItems=\"center\">\n                <Typography variant=\"body2\">\n                  <Link href=\"https://github.com/xsalazar\" color=\"textPrimary\">\n                    <MarkGithubIcon size=\"small\" verticalAlign=\"middle\" />\n                  </Link>\n                </Typography>\n              </ListItem>\n\n              {/* Link */}\n              <ListItem alignItems=\"center\">\n                <Typography variant=\"body2\">\n                  <Link href=\"https://github.com/xsalazar/learn-emoji\">Source Code</Link>\n                </Typography>\n              </ListItem>\n            </List>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import \"./App.css\";\nimport React from \"react\";\nimport Emoji from \"./components/Emoji/Emoji\";\nimport Footer from \"./components/Footer/Footer\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      emojis: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.github.com/emojis\")\n      .then((resp) => resp.json())\n      .then((resp) => {\n        const emojis = [];\n        for (const key in resp) {\n          emojis.push({\n            name: key,\n            link: resp[key],\n          });\n        }\n        this.setState({\n          emojis,\n          loading: false\n        });\n      })\n      .catch((e) => console.error(e));\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (<div></div>);\n    }\n\n    return (\n      <div className=\"App\">\n        <Emoji emojis={this.state.emojis}></Emoji>\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}